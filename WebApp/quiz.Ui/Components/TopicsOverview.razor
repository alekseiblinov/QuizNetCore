@using quiz.ModelBusiness

@attribute [Authorize(Roles = "Администраторы")]

@* Если данные в контрол ещё не загружены полностью, то *@
@if (!IsLoaded)
{
    @* Отображение пользователю надписи "Загрузка". *@
    <DxLoadingPanel Visible="true"
                    Text="Загрузка..."
                    ApplyBackgroundShading="false"
                    IndicatorAnimationType="WaitIndicatorAnimationType.Spin">
    </DxLoadingPanel>
}
else
{
    @*<div style="height:250px; overflow-y:scroll">*@
    @* Формирование таблицы со списком объектов. *@
    <table class="table table-sm table-responsive-lg table-bordered text-center">
        <thead>
        <tr>
            <th class="align-middle">Название</th>
            <th class="align-middle">Номер</th>
        </tr>
        </thead>
        <tbody>
        @* Если при взаимодействии с WebAPI были произошли ошибки, то *@
        @if (HasWebApiErrors)
        {
            @* Информация о проблемах взаимодействия с WebAPI *@
            <div class="alert alert-danger mt-2">@WebApiErrorsDescription</div>
        }
        else
        {            
            @* Если нет данных для отображения, то *@
            @if (Objects == null || !Objects.Any())
            {
                // Отображение пользователю надписи "Нет данных".
                <p class="align-middle"><em>Нет данных</em></p>
            }
            else
            {
                <Virtualize Context="currentObject" Items="@Objects.ToList()" TItem="TopicModel">
                    <ItemContent>
                        <tr class="@GetRowHtmlClass(currentObject.Id)" @onclick="() => SelectRowAsync(currentObject.Id)">
                            <td class="align-middle">@currentObject.Name</td>
                            <td class="align-middle">@currentObject.OrderNumber</td>
                        </tr>
                    </ItemContent>
                    <Placeholder>
                        @* Отображение пользователю надписи "Загрузка". *@
                        <DxLoadingPanel Visible="true"
                                        Text="Загрузка..."
                                        ApplyBackgroundShading="false"
                                        IndicatorAnimationType="WaitIndicatorAnimationType.Spin">
                        </DxLoadingPanel>
                    </Placeholder>
                </Virtualize>
            }
        }
        </tbody>
    </table>

    @* Если нет данных для отображения, то *@
    @if (Objects == null || !Objects.Any())
    {
        // Отображение пользователю надписи "Нет данных".
        <p class="align-middle"><em>Нет данных</em></p>
    }
    else
    {
        <DxGrid 
            Data="@Objects.ToList()" 
            EditMode="GridEditMode.EditRow" 
            SelectionMode="GridSelectionMode.Single"
            AllowSelectRowByClick="true"
            >
            <Columns>
                <DxGridCommandColumn 
                    Width="150px"
                    />
                <DxGridDataColumn 
                    FieldName="Name" 
                    Caption="Topic name" 
                    TextAlignment="GridTextAlignment.Center" 
                    CaptionAlignment="GridTextAlignment.Center" 
                    />
                <DxGridDataColumn 
                    FieldName="OrderNumber" 
                    Caption="Order number"
                    TextAlignment="GridTextAlignment.Center"
                    CaptionAlignment="GridTextAlignment.Center" 
                    />
            </Columns>
        </DxGrid>
    }
    @*</div>*@



    <div class="row">
        @* Рамка отступов вокруг кнопок управления *@
        <div class="col-lg d-lg-flex align-content-stretch mx-1 mt-1">
            <DxButton Click="TopicAdd" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline" class="m-1 col-auto">Добавить</DxButton>
            @* Отображать дополнительные кнопки управления выбранным элементом. *@
            <DxButton Click="() => TopicEdit(SelectedElement?.Id ?? Guid.Empty)" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline" class="m-1" disabled="@(SelectedElement == null)">Редактировать</DxButton>
            <DxButton Click="ObjectDeleteAsync" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Outline" class="m-1" disabled="@(SelectedElement == null)">Удалить</DxButton>
            @* Отображение кнопок "Вверх" и "Вниз" *@
            <DxButton Click="RecordMoveUp" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline" class="m-1 ms-auto" disabled="@(IsUpButtonDisabled || SelectedElement == null)" style="width: 75px">Вверх</DxButton>
            <DxButton Click="RecordMoveDown" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="ButtonRenderStyleMode.Outline" class="m-1" disabled="@(IsDownButtonDisabled || SelectedElement == null)" style="width: 75px">Вниз</DxButton>
        </div>
    </div>

    // Подключение диалоговых окон - popup-окно подтверждения удаления.
    <DialogDelete @ref="ObjectDeleteDialog" DeletedSuccessfullyEventCallback="@DeleteDialogTopic_OnDeletedSuccessfully" ObjectDataService="@ObjectDataService" ObjectToDeleteId="@SelectedElement?.Id"></DialogDelete>
}
