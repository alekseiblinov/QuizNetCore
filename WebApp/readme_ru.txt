---------------------------------------------------------------------------
	Назначение проекта.

Данное приложение является веб-сайтом с несколькими страницами и служит для возможности проведения простых классических тестов с последующим отображением результатов выполнения для пользователей. Результаты выполнения отображаются в виде количества правильных ответов и общего числа вопросов. Также выводится информация о правильных и неправильных ответах пользователя. Для прохождения тестирования пользователю необходимо выполнить предварительную регистрацию или вход. Имеется возможность назначить избранным пользователям роль Администратора. Пользователи, обладающие такой ролью, имеют возможность управлять учётными записями других пользователей, а также просматривать результаты тестов любых пользователей. 
В приложении также реализованы следующие особенности:
○ Управление Администратором темами (добавление, редактирование и удаление) для тестирования. 
○ Управление Администратором вопросами (добавление, редактирование и удаление) для тестирования. 
○ Управление пользователями и ролями. 
○ Аутентификация и авторизация пользователей на основе простых учётных записей.
○ Запись действий пользователей в таблицу БД (логгирование).
○ Единая служба доступа к данным в БД для обеспечения действий CRUD.

	Использованные технологии.

○ СУБД: Microsoft SQL Server 2017 (подойдёт и более ранний SQL Server 2012).
○ Платформа: .NET 6.0.
○ IDE: Microsoft Visual Studio.


	История появления.

Данный проект появился в результате изучения мною технологии Blazor осенью 2024 года и является полезным упражнением. Идею подсказал мой друг Александр Гарбузов, который попросил помочь доработать учебный проект на Python и My SQL. Он любезно разрешил использовать список тестовых вопросов и ответов. 


	Проработанные темы.

Во время выполнения были изучены следующие темы:
○ Components.
○ Pages, routing, and layouts.
○ Dependency Injection.
○ Interaction with data.
○ Interaction with Web API.
○ Forms and validation.
○ Logging.
○ Security.
○ Deployment.


	Структура БД.

○ AspNetRoleClaims - часть подсистемы безопасности.
○ AspNetRoles - роли. Часть подсистемы безопасности.
○ AspNetUserClaims - часть подсистемы безопасности.
○ AspNetUserLogins - часть подсистемы безопасности.
○ AspNetUserRoles - назначенные роли для каждого пользователя. Часть подсистемы безопасности.
○ AspNetUsers - пользователи. Часть подсистемы безопасности.
○ AspNetUserTokens - часть подсистемы безопасности.
○ LogRecords - действия пользователей в системе (лог).
○ Question - вопросы для тестирования.
○ SecurityTokens - использованные токены безопасности. Часть подсистемы безопасности.
○ Topics - темы для тестирования.
○ UserQuestionProgress - результаты ответов пользователей на вопросы тестов.


	Структура папок проекта.

○ ..\quiz.Api\ - контроллеры Web API.
○ ..\quiz.Logger\ - типы и функции, обеспечивающие работу подсистемы логгирования.
○ ..\quiz.ModelBusiness\ - типы, представляющие сущности данных для последующей их обработки и представления в UI.
○ ..\quiz.ModelDb\ - типы, представляющие сущности данных, используемые при взаимодействии с базой данных.
○ ..\quiz.Shared\ - типы и функции, совместно используемые в методах Web API и UI. На эту сборку ссылаются сборки quiz.Api и quiz.Ui.
○ ..\quiz.Ui\ - типы и функции, предназначенные для формирования пользовательского интерфейса, его отображения и обеспечения возможности взаимодействия пользователя с ним.


	Известные ограничения.

○ Количество вариантов ответов на каждый вопрос фиксировано и равно четырём.
○ Для Администратора отсутствует возможность просмотра списка всех тестов и выбора для просмотра страницы результатов одного из них. Страницу результатов можно открыть зная ID теста с помощью ссылки ~/resultsoverviewpage/<id_теста>.
○ Отсутствие сущности Quiz. Такой таблицы нет в БД, между тем как в таблице результатов теста UserQuestionProgress Есть поле QuizId. Такая сущность могла бы быть полезна для хранения дополнительных сведений о каждом тестировании и для оптимизации структуры БД, например перемещения поля UserId и LastAnswered из таблицы UserQuestionProgress в таблицу Quiz.
○ Неоптимальные запросы. Из таблиц БД часто выбирается больше данных, чем реально нужно. 
  Пример: 
  // Получение перечня всех Ответов на вопросы.
  WebApiCallResult<IEnumerable<UserQuestionProgressModel>> webApiCallResultAnswers = UserQuestionProgressesDataServiceInstance.GetAllObjectsAsync(currentUserName).Result;

	Публикация.
Этот проект опубликован на GitHub https://github.com/alekseiblinov/QuizNetCore/.
